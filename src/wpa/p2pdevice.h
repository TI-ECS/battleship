/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p p2pdevice.h:p2pdevice.cpp -i types.h ../xml/p2pdevice.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef P2PDEVICE_H_1323204643
#define P2PDEVICE_H_1323204643

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "types.h"

/*
 * Proxy class for interface fi.w1.wpa_supplicant1.Interface.P2PDevice
 */
class FiW1Wpa_supplicant1InterfaceP2PDeviceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "fi.w1.wpa_supplicant1.Interface.P2PDevice"; }

public:
    FiW1Wpa_supplicant1InterfaceP2PDeviceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~FiW1Wpa_supplicant1InterfaceP2PDeviceInterface();

    Q_PROPERTY(QDBusObjectPath Group READ group)
    inline QDBusObjectPath group() const
    { return qvariant_cast< QDBusObjectPath >(property("Group")); }

    Q_PROPERTY(QVariantMap P2PDeviceProperties READ p2PDeviceProperties WRITE setP2PDeviceProperties)
    inline QVariantMap p2PDeviceProperties() const
    { return qvariant_cast< QVariantMap >(property("P2PDeviceProperties")); }
    inline void setP2PDeviceProperties(const QVariantMap &value)
    { setProperty("P2PDeviceProperties", qVariantFromValue(value)); }

    Q_PROPERTY(QDBusObjectPath PeerGO READ peerGO)
    inline QDBusObjectPath peerGO() const
    { return qvariant_cast< QDBusObjectPath >(property("PeerGO")); }

    Q_PROPERTY(QList<QDBusObjectPath> Peers READ peers)
    inline QList<QDBusObjectPath> peers() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("Peers")); }

    Q_PROPERTY(QString Role READ role)
    inline QString role() const
    { return qvariant_cast< QString >(property("Role")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AddService(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("AddService"), argumentList);
    }

    inline QDBusPendingReply<int> Connect(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("Connect"), argumentList);
    }

    inline QDBusPendingReply<> DeleteService(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("DeleteService"), argumentList);
    }

    inline QDBusPendingReply<> Disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Disconnect"), argumentList);
    }

    inline QDBusPendingReply<> ExtendedListen(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("ExtendedListen"), argumentList);
    }

    inline QDBusPendingReply<> Find(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("Find"), argumentList);
    }

    inline QDBusPendingReply<> Flush()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Flush"), argumentList);
    }

    inline QDBusPendingReply<> FlushService()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("FlushService"), argumentList);
    }

    inline QDBusPendingReply<> GroupAdd(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("GroupAdd"), argumentList);
    }

    inline QDBusPendingReply<> Invite(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("Invite"), argumentList);
    }

    inline QDBusPendingReply<> Listen(int timeout)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(timeout);
        return asyncCallWithArgumentList(QLatin1String("Listen"), argumentList);
    }

    inline QDBusPendingReply<> PresenceRequest(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("PresenceRequest"), argumentList);
    }

    inline QDBusPendingReply<> ProvisionDiscoveryRequest(const QDBusObjectPath &peer, const QString &config_method)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(peer) << qVariantFromValue(config_method);
        return asyncCallWithArgumentList(QLatin1String("ProvisionDiscoveryRequest"), argumentList);
    }

    inline QDBusPendingReply<> RejectPeer(const QDBusObjectPath &peer)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(peer);
        return asyncCallWithArgumentList(QLatin1String("RejectPeer"), argumentList);
    }

    inline QDBusPendingReply<> ServiceDiscoveryCancelRequest(qulonglong args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("ServiceDiscoveryCancelRequest"), argumentList);
    }

    inline QDBusPendingReply<> ServiceDiscoveryExternal(int arg)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(arg);
        return asyncCallWithArgumentList(QLatin1String("ServiceDiscoveryExternal"), argumentList);
    }

    inline QDBusPendingReply<> ServiceDiscoveryRequest(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("ServiceDiscoveryRequest"), argumentList);
    }

    inline QDBusPendingReply<> ServiceDiscoveryResponse(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("ServiceDiscoveryResponse"), argumentList);
    }

    inline QDBusPendingReply<> ServiceUpdate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ServiceUpdate"), argumentList);
    }

    inline QDBusPendingReply<> StopFind()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("StopFind"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DeviceFound(const QDBusObjectPath &path);
    void DeviceLost(const QDBusObjectPath &path);
    void GONegotiationFailure(int status);
    void GONegotiationRequest(const QDBusObjectPath &path, int dev_passwd_id);
    void GONegotiationSuccess();
    void GroupFinished(const QString &ifname, const QString &role);
    void GroupStarted(const QVariantMap &properties);
    void InvitationResult(const QVariantMap &invite_result);
    void P2PStateChanged(const QStringMap &states);
    void ProvisionDiscoveryFailure(const QDBusObjectPath &peer_object, int status);
    void ProvisionDiscoveryPBCRequest(const QDBusObjectPath &peer_object);
    void ProvisionDiscoveryPBCResponse(const QDBusObjectPath &peer_object);
    void ProvisionDiscoveryRequestDisplayPin(const QDBusObjectPath &peer_object, const QString &pin);
    void ProvisionDiscoveryRequestEnterPin(const QDBusObjectPath &peer_object);
    void ProvisionDiscoveryResponseDisplayPin(const QDBusObjectPath &peer_object, const QString &pin);
    void ProvisionDiscoveryResponseEnterPin(const QDBusObjectPath &peer_object);
    void serviceDiscoveryRequest(const QVariantMap &sd_request);
    void serviceDiscoveryResponse(const QVariantMap &sd_response);
};

namespace fi {
  namespace w1 {
    namespace wpa_supplicant {
      namespace Interface {
        typedef ::FiW1Wpa_supplicant1InterfaceP2PDeviceInterface P2PDevice;
      }
    }
  }
}
#endif
