/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p wps.h:wps.cpp -i types.h ../xml/wps.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef WPS_H_1323190995
#define WPS_H_1323190995

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "types.h"

/*
 * Proxy class for interface fi.w1.wpa_supplicant1.Interface.WPS
 */
class FiW1Wpa_supplicant1InterfaceWPSInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "fi.w1.wpa_supplicant1.Interface.WPS"; }

public:
    FiW1Wpa_supplicant1InterfaceWPSInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~FiW1Wpa_supplicant1InterfaceWPSInterface();

    Q_PROPERTY(bool ProcessCredentials READ processCredentials WRITE setProcessCredentials)
    inline bool processCredentials() const
    { return qvariant_cast< bool >(property("ProcessCredentials")); }
    inline void setProcessCredentials(bool value)
    { setProperty("ProcessCredentials", qVariantFromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QVariantMap> Start(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("Start"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Credentials(const QVariantMap &credentials);
    void Event(const QString &name, const QVariantMap &args);
    void PropertiesChanged(const QVariantMap &properties);
};

namespace fi {
  namespace w1 {
    namespace wpa_supplicant {
      namespace Interface {
        typedef ::FiW1Wpa_supplicant1InterfaceWPSInterface WPS;
      }
    }
  }
}
#endif
